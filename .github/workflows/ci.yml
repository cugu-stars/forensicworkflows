name: CI
on:
  push:
    branches: [ master ]
  pull_request:
  schedule:
    - cron:  '0 0 * * *'

jobs:

  unittests:
    name: Go Unittests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: '1.14'}
      - name: Checkout code
        uses: actions/checkout@v1

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download
      - name: Install golangci-lint & go-acc
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.25.0
          go get -u github.com/ory/go-acc
        shell: bash

      - name: Setup Build
        run: |
          go generate
          go build
        shell: bash

      - name: Lint
        run: golangci-lint run --verbose --config test/.golangci.yml --enable gofmt --enable goimports
        if: matrix.os != 'windows-latest'
      - name: Lint Windows
        run: golangci-lint run --verbose --config test/.golangci.yml
        if: matrix.os == 'windows-latest'

      - name: Download testdata
        run: bash test/download_testdata.sh
        shell: bash
      - name: Test
        run: go-acc ./...
      - name: Upload coverage
        env:
          CI: "true"
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash) -f coverage.txt
        # if: matrix.os == 'windows-latest'
        shell: bash

  integrationtests:
    name: Go Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: '1.14'}
      - uses: actions/setup-python@v1
        with: {python-version: '3.8'}
      - run: doskey python3=python
        if: matrix.os == 'windows-latest'
      - name: Checkout code
        uses: actions/checkout@v1

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Setup Build
        run: go generate

      - name: Setup node
        uses: actions/setup-node@v1
        with: {node-version: '10.x'}
      - name: Install bats
        run: npm install -g bats

      - run: go install .
        shell: bash
      - name: Install forensicstore
        run: go get github.com/forensicanalysis/forensicstore/cmd/forensicstore

      - name: Download testdata
        run: bash test/download_testdata.sh
        shell: bash
      - name: Bats test Unix
        run: bats test/bats/forensicworkflows.bats test/bats/forensicworkflows_unix.bats
        shell: bash
        if: matrix.os != 'windows-latest'
      - name: Bats test Windows
        run: bats test/bats/forensicworkflows.bats
        shell: bash
        if: matrix.os == 'windows-latest'

      - name: Go Build
        run: |
          go build .
          mkdir bin
          mv forensicworkflows* bin
        shell: bash
      - name: Upload
        uses: actions/upload-artifact@master
        with:
          name: forensicworkflows ${{ matrix.os }}
          path: bin

  scripts:
    name: Python Script Plugin Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/setup-python@v1
        with: {python-version: '3.8'}
      - run: pip install pylint pytest pytest-cov
      - name: Checkout code
        uses: actions/checkout@v1
      - run: pip install -r config/requirements.txt
      - name: Python Lint
        run: pylint *.py --rcfile ../../test/.pylintrc
        shell: bash
        working-directory: config/scripts
      - name: Download testdata
        run: bash test/download_testdata.sh
        shell: bash
      - name: Python Test
        run: pytest -v --cov-config .coveragerc --cov-report=xml --cov=config/scripts test/python
        shell: bash
      - name: Upload coverage
        env:
          CI: "true"
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash) -f coverage.xml
        # if: matrix.os == 'windows-latest'
        shell: bash

  collect:
    name: Run Collect
    runs-on: windows-latest
    steps:
      - name: Collect artifacts
        run: |
          curl --fail --output windows-latest.zip --location https://github.com/forensicanalysis/artifactcollector/releases/download/v0.14.2/windows-latest.zip
          unzip windows-latest.zip
          ./artifactcollector.exe
          mv *.forensicstore test.forensicstore
      - name: upload test.forensicstore
        uses: actions/upload-artifact@v2
        with:
          name: test.forensicstore
          path: test.forensicstore

  process:
    name: Run Process
    needs: collect
    runs-on: ubuntu-latest
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: '1.14'}
      - uses: actions/setup-python@v1
        with: {python-version: '3.8'}

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Checkout code
        uses: actions/checkout@v1
      - name: Setup Build
        run: |
          go generate
          go install .
          forensicworkflows install -f

      - name: download test.forensicstore
        uses: actions/download-artifact@v2
        with:
          name: test.forensicstore

      - name: run eventlogs
        run: forensicworkflows run --debug eventlogs --format csv --add-to-store test.forensicstore
        shell: bash
      - name: run export
        run: forensicworkflows run --debug export --format csv test.forensicstore
        shell: bash
      - name: run export-timesketch
        run: forensicworkflows run --debug export-timesketch --format jsonl test.forensicstore
        shell: bash
      - name: run hotfixes
        run: forensicworkflows run --debug --debug hotfixes --format csv test.forensicstore
        shell: bash
      # - name: run import-file
      #   run: forensicworkflows run --debug import-file --format csv test.forensicstore
      #   shell: bash
      # - name: run import-forensicstore
      #   run: forensicworkflows run --debug import-forensicstore --format csv test.forensicstore
      #   shell: bash
      # - name: run import-image
      #   run: forensicworkflows run --debug import-image --format csv test.forensicstore
      #   shell: bash
      # - name: run import-json
      #   run: forensicworkflows run --debug import-json --format csv test.forensicstore
      #   shell: bash
      - name: run networking
        run: forensicworkflows run --debug networking --format csv test.forensicstore
        shell: bash
      - name: run prefetch
        run: forensicworkflows run --debug prefetch --format csv test.forensicstore
        shell: bash
      - name: run run-keys
        run: forensicworkflows run --debug run-keys --format csv test.forensicstore
        shell: bash
      - name: run services
        run: forensicworkflows run --debug services --format csv test.forensicstore
        shell: bash
      - name: run shimcache
        run: forensicworkflows run --debug shimcache --format csv test.forensicstore
        shell: bash
      - name: run sigma
        run: forensicworkflows run --debug sigma --format csv test.forensicstore
        shell: bash
      - name: run software
        run: forensicworkflows run --debug software --format csv test.forensicstore
        shell: bash
      - name: run usb
        run: forensicworkflows run --debug usb --format csv test.forensicstore
        shell: bash
      - name: run yara
        run: forensicworkflows run --debug yara --format csv test.forensicstore
        shell: bash
      - name: run plaso
        run: forensicworkflows run --debug plaso --format csv test.forensicstore
        shell: bash

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: '1.14'}
      - run: go get -u github.com/cugu/godoc2readme

      - name: Checkout code
        uses: actions/checkout@v1
      - run: godoc2readme --template docs/readme-template.md . > README2.md
      - run: diff README.md README2.md
